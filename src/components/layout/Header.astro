---
import { menuLinks } from '@/site-config'
---

<header-component
  class='group sticky top-4 z-30 mb-16 box-content w-full rounded-lg border border-transparent py-1 transition-all duration-300 sm:rounded-2xl [&.not-top]:border-border [&.not-top]:bg-background dark:[&.not-top]:bg-primary-foreground'
>
  <header class='flex flex-wrap text-sm sm:flex-nowrap sm:justify-start'>
    <nav
      class='relative mx-auto flex w-full items-center justify-between sm:flex sm:items-center'
      aria-label='global'
    >
      <a
        class='flex-none text-xl font-semibold transition-all duration-300 group-[.not-top]:ms-5'
        href='/'
        aria-label='Brand'>CWorld Site</a
      >

      <!-- menu -->
      <div class='flex gap-x-4 sm:gap-x-7'>
        <div
          id='headerExpandConetent'
          class='end-0 start-0 top-12 z-20 grid transition-all duration-300 group-[.not-top]:rounded-lg group-[.expanded]:opacity-100 dark:group-[.expanded.not-top]:bg-primary-foreground max-md:border-b max-sm:absolute max-sm:pb-4 max-sm:pt-0 max-sm:opacity-0 max-sm:group-[.not-top]:border max-sm:group-[.expanded]:bg-background max-sm:group-[.not-top]:px-4 max-sm:group-[.not-top]:pb-2 max-sm:group-[.not-top]:pt-2 sm:grid-rows-1 sm:border-0'
        >
          <div
            class='flex flex-col items-center justify-center gap-x-5 gap-y-2 overflow-hidden transition-colors sm:flex-row sm:gap-x-7'
          >
            {
              menuLinks.map((item) => (
                <a
                  href={item.link}
                  class='w-full flex-none grow py-2 text-right text-[1.05rem] font-medium hover:text-primary sm:w-fit'
                  aria-label='Nav Menu Item'
                >
                  {item.label}
                </a>
              ))
            }
          </div>
        </div>

        <!-- buttons -->
        <div class='flex gap-x-4 transition-all group-[.not-top]:me-1.5 group-[.not-top]:gap-x-2'>
          <a
            href='/search'
            class='rounded-md border p-1.5 transition-all hover:bg-border sm:group-[.not-top]:rounded-xl'
          >
            <span class='sr-only'>Search</span>
            <svg class='size-5'>
              <use href='/icons/header.svg#mingcute-search-2-line'></use>
            </svg>
          </a>

          <button
            id='toggleDarkMode'
            class='group/dark rounded-md border p-1.5 transition-all hover:bg-border sm:group-[.not-top]:rounded-xl'
          >
            <span class='sr-only'>Dark Theme</span>
            <svg class='size-5 transition-all group-hover/dark:text-primary dark:hidden'>
              <use href='/icons/header.svg#mingcute-sun-line'></use>
            </svg>
            <svg class='hidden size-5 transition-all group-hover/dark:text-primary dark:block'>
              <use href='/icons/header.svg#mingcute-moon-stars-line'></use>
            </svg>
          </button>
          <button
            id='toggleMenu'
            class='rounded-md border p-1.5 transition-all hover:bg-border sm:hidden sm:group-[.not-top]:rounded-xl'
          >
            <span class='sr-only'>Menu</span>
            <svg class='size-5'>
              <use href='/icons/header.svg#mingcute-menu-line'></use>
            </svg>
          </button>
        </div>
      </div>
    </nav>
  </header>
</header-component>

<script>
  class Header extends HTMLElement {
    constructor() {
      super()
    }

    connectedCallback() {
      // Header
      let preScrollY = window.scrollY
      this.classList.toggle('not-top', preScrollY > 20)

      window.addEventListener('scroll', () => {
        this.classList.toggle('not-top', window.scrollY > 20)
        this.dataset.show = (window.scrollY < 350 || window.scrollY < preScrollY).toString()
        preScrollY = window.scrollY
      })

      // Dark Mode
      function getCurrentTheme() {
        return localStorage.getItem('theme')
      }
      const toggleDarkModeButton = this.querySelector('#toggleDarkMode')
      toggleDarkModeButton?.addEventListener('click', () => {
        const toggleDarkModeEvent = new CustomEvent('theme-change', {
          detail: { theme: getCurrentTheme() === 'light' ? 'dark' : 'light' }
        })
        document.dispatchEvent(toggleDarkModeEvent)
      })

      // Menu
      const toggleMenuButton = this.querySelector('#toggleMenu')
      toggleMenuButton?.addEventListener('click', () => {
        this.classList.toggle('expanded')
      })
    }
  }
  customElements.define('header-component', Header)
</script>

<style>
  /* header-componnet */
  header-component.not-top {
    box-shadow:
      rgb(255, 255, 255) 0px 0px 0px 0px,
      rgba(24, 24, 27, 0.05) 0px 0px 0px 1px,
      rgba(39, 39, 42, 0.05) 0px 10px 15px -3px,
      rgba(39, 39, 42, 0.05) 0px 4px 6px -4px;
  }
  header-component[data-show='false']:not(.expanded) {
    transform: translateY(-4.5rem);
  }
  @media (min-width: 800px) {
    header-component.not-top {
      width: 80%;
    }
  }

  /* header menu */
  @media (max-width: 640px) {
    #headerExpandConetent {
      grid-template-rows: 0fr;
    }
    .expanded #headerExpandConetent {
      grid-template-rows: 1fr;
    }
    .expanded.not-top #headerExpandConetent {
      box-shadow:
        rgb(255, 255, 255) 0px 0px 0px 0px,
        rgba(24, 24, 27, 0.05) 0px 0px 0px 1px,
        rgba(39, 39, 42, 0.05) 0px 10px 15px -3px,
        rgba(39, 39, 42, 0.05) 0px 4px 6px -4px;
    }
  }
</style>
