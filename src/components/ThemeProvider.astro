---

---

<script>
  const lightModePref = window.matchMedia('(prefers-color-scheme: light)')

  // Get user preference from local storage or from browser preference
  function getUserPref() {
    return localStorage.getItem('theme') || (lightModePref.matches ? 'light' : 'dark')
  }

  function setTheme(newTheme: string) {
    const validThemes = ['light', 'dark']
    if (!validThemes.includes(newTheme)) {
      console.log(`Invalid theme value '${newTheme}' received. Expected 'light' or 'dark'.`)
      return
    }

    const root = document.documentElement
    const isDarkModeEnabled = root.classList.contains('dark')
    // If current dark theme and new theme is dark, return
    if (
      (isDarkModeEnabled && newTheme === 'dark') ||
      (!isDarkModeEnabled && newTheme === 'light')
    ) {
      return
    }
    root.classList.toggle('dark')
  }

  // Initial Setup
  setTheme(getUserPref())

  // View Transitions hook to restore theme
  document.addEventListener('astro:after-swap', () => setTheme(getUserPref()))

  // Listen for theme-change custom event
  document.addEventListener('theme-change', (e) => {
    const theme = (e as CustomEvent).detail.theme
    localStorage.setItem('theme', theme)
    setTheme(theme)
  })

  // Listen for prefers-color-scheme change
  lightModePref.addEventListener('change', (e) => setTheme(e.matches ? 'light' : 'dark'))
</script>
