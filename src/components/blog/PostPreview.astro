---
import type { HTMLTag, Polymorphic } from 'astro/types'
import type { CollectionEntry } from 'astro:content'
import { Image } from 'astro:assets'

import FormattedDate from '../FormattedDate.astro'
import Button from '../Button.astro'
import { cn } from '@/utils'

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
  post: CollectionEntry<'post'>
  detailed?: boolean
  class?: string
}

const {
  as: Tag = 'div',
  post: { data, slug, render },
  detailed = false,
  class: className
} = Astro.props
const postDate = data.updatedDate ?? data.publishDate

const { remarkPluginFrontmatter } = await render()
---

<li
  class={cn(
    'group/card relative flex basis-full flex-col gap-2 rounded-2xl border border-border bg-background transition-colors ease-in-out px-5 py-3 hover:bg-primary-foreground sm:flex-row sm:gap-x-4',
    detailed && 'sm:py-5',
    className
  )}
>
  <FormattedDate class='min-w-[95px] py-1 text-xs' date={postDate} />

  <Tag class='z-10 flex-grow'>
    <!-- title -->
    <a
      data-astro-prefetch
      href={`/blog/${slug}`}
      class='group/link w-full transition-all hover:text-primary'
    >
      <div class='flex justify-between'>
        <div>
          {data.draft && <span class='text-red-500'>(Draft) </span>}
          {data.title}
        </div>
        <svg
          xmlns='http://www.w3.org/2000/svg'
          width='16'
          height='16'
          viewBox='0 0 24 24'
          fill='none'
          stroke-width='2.5'
          stroke-linecap='round'
          stroke-linejoin='round'
          class='my-1 stroke-muted-foreground group-hover/link:stroke-primary'
          ><line
            x1='5'
            y1='12'
            x2='19'
            y2='12'
            class='translate-x-4 scale-x-0 transition-all duration-300 ease-in-out group-hover/link:translate-x-1 group-hover/link:scale-x-100'
          ></line><polyline
            points='12 5 19 12 12 19'
            class='translate-x-0 transition-all duration-300 ease-in-out group-hover/link:translate-x-1'
          ></polyline></svg
        >
      </div>
      {
        detailed && (
          <>
            {/* desc */}
            <p
              class={cn(
                'line-clamp-2 pt-1 text-sm text-muted-foreground sm:line-clamp-3',
                data.coverImage && 'me-24'
              )}
            >
              {data.description}
            </p>
            <div class='mb-1.5 flex items-center gap-2 pt-1.5 text-sm italic leading-4 text-muted-foreground sm:mb-2 sm:pt-4'>
              {/* reading time */}
              <span class='flex items-center gap-1'>
                <svg class='size-4'>
                  <use href='/icons/ui.svg#mingcute-time-line' />
                </svg>
                {remarkPluginFrontmatter.minutesRead}
              </span>
              {/* language */}
              {data.language && (
                <span class='flex items-center gap-1'>
                  <svg class='size-4'>
                    <use href='/icons/project.svg#mingcute-earth-2-line' />
                  </svg>
                  {data.language}
                </span>
              )}
            </div>
          </>
        )
      }
    </a>
    <!-- tags -->
    {
      detailed && data.tags && (
        <ul class='text-bgColor mt-3 flex flex-wrap gap-2'>
          {data.tags.map((tag: string) => (
            <li>
              <Button title={tag} href={`/tags/${tag}`} style='pill' />
            </li>
          ))}
        </ul>
      )
    }
  </Tag>
  {
    detailed && data.coverImage && (
      <Image
        src={data.coverImage.src}
        alt={data.coverImage.alt || data.title}
        class='absolute right-0 top-0 z-0 h-full w-2/3 rounded-2xl object-cover opacity-30 transition-opacity duration-300 group-hover/card:opacity-60 sm:w-3/5'
        style={{
          maskImage: 'linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%)',
          msMaskImage: '-ms-linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%)',
          WebkitMaskImage:
            '-webkit-linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%)'
        }}
        loading='eager'
      />
    )
  }
</li>
